var coordsX
var coordsY
var coords2Y

?!isLevel()
 return

var id=＂sorgin.3.65.＂+loc.id+＂.＂+loc.stars
var records_fst=GetArray(id+＂.fst＂,［0,［］,［］］)
var records_sec=GetArray(id+＂.sec＂,［0,［］,［］］)
var records_lst=GetArray(id+＂.lst＂,［0,［］,［］］)
var config=GetArray(＂sorgin.Timer.config＂,［0,0,［true,true,true］］)

var panel
var optFormat
var optTable
var toggleTexts=［scores,last,secure］
var toggleOpts=［］
var tableTxt

var runing=false
var unavailable=true
var loops=0

var records
var record_diff
var records_hp
var records_section
var records_stime
var records_shp

var ihp=0
var lastTotaltime
var lastBoss
var lastSection

var unavailableMsg=＂    WAITING TO LOOP    ＂
var unavailableMsgSize=string.Size(unavailableMsg)
var cache_top
var cache_table

func Update()
 ?!runing
  Start()
 :?totaltime=1
  OnNewLoop()
 ?unavailable
  DisplayError()
 :
  Calculate()
  Display()

func Start()
 runing=true
 ?records_fst［0］> 0 & records_fst［0］<loc.bestTime |records_sec［0］> 0 & records_sec［0］< loc.bestTime
  records_fst=［0,［］,［］］
  records_sec=［0,［］,［］］
  records_lst=［0,［］,［］］
 ?totaltime=1
  ResetData()
func DisplayError()
 >`@screen.w-unavailableMsgSize-1@,0,@color.Lerp(#ccc,#666,math.sin(time*0.06))@,@unavailableMsg@
 return

func Display()
 var t=config［1］
 var text=cache_top
 ?config［2］［0］
  ?t = 0
   text=cache_top+＂ ＂+Format(totaltime)
  >`@screen.w-string.Size(text) - 3 @,0,@text@
 ?t = 0
  return
 >`@coordsX@,@coordsY@,@Format(totaltime-records_stime［t-1］)@
 >`@coordsX@,@coords2Y@,@Format(totaltime)@

func OnNewLoop()
 loops++
 lastTotaltime++
 AddSection(0)
 AddSection(1)

 ?lastTotaltime >= loc.bestTime
  ?records_fst［0］=0 | lastTotaltime < records_fst［0］
   records_fst =［lastTotaltime,records［0］,records［1］］
   SetArray(id+＂.fst＂,records_fst)

  ?hp >= ihp & (records_sec［0］= 0 | lastTotaltime < records_sec［0］)
   records_sec =［lastTotaltime,records［0］,records［1］］
   SetArray(id+＂.sec＂,records_sec)
  records_lst=［lastTotaltime,records［0］,records［1］］
  SetArray(id+＂.lst＂,records_lst)
 ResetData()

func Calculate()
 lastTotaltime = totaltime
 ?screen.i ! lastSection
  lastSection = screen.i
  AddSection(1)

 ?foe = boss & foe.id ! lastBoss & foe.distance < 30
  lastBoss = foe.id
  AddSection(0)

func AddSection(i)
  records［i］.Add(lastTotaltime - records_stime［i］)
  records_hp［0］.Add(hp - records_shp［i］)
  records_section［i］= records_section［i］+1
  records_stime［i］= lastTotaltime
  records_shp［i］= hp
  UpdateCache()

func ResetData()
 records=［［］,［］］
 record_diff=［［］,［］］
 records_hp=［［］,［］］
 records_section=［0,0］
 records_stime=［1,1］

 records_shp=［hp,hp］
 ihp = hp
 lastBoss =＂-1＂
 lastSection=screen.i

 unavailable=false
 CreatePanel()
 UpdateCache()

func UpdateCache()
 var t = config［1］
 var l = ♦
 ?loops>0
  l=loops

 cache_top=l+＂ avg.＂+Format(loc.averageTime)+＂ best.＂+ Format(loc.bestTime)

 optFormat.text=Pad(Format(loc.averageTime),8,＂ ＂)
 ?t = 0
  optTable.text=＂ Minimal＂
 :?t = 1
  optTable.text=＂ Compact＂
 :?t = 2
  optTable.text=＂Sections＂

 for i=0..toggleOpts.Count()-1
  ?config［2］［i］
   toggleOpts［i］.tcolor = #fff
  :
   toggleOpts［i］.tcolor = #888
 ?t = 0
  tableTxt.text = ＂＂
  return

 var text = ＂＂
 var formatW = string.Size(Format(1234))+1
 var extra = 5
 var columns =［］
 var fCount=records［t-1］.Count()
 var diff=record_diff［t-1］

 coordsX = screen.w-(formatW+extra)+1
 coordsY = fCount+2
 coords2Y = records_fst［t］.Count()+3

 ?config［2］［2］
  columns.Add(records_sec［t］)
  text = text+Pad(＂SEC＂,formatW,＂ ＂)
  extra++ 

 ?config［2］［1］
  text = text+Pad(＂ LAST＂,formatW,＂ ＂)
  columns.Add(records_lst［t］)

 text = text+Pad(＂ BEST＂,formatW,＂ ＂)
 columns.Add(records_fst［t］)

 text = text+Pad(＂RUN＂,formatW,＂ ＂)
 columns.Add(records［t-1］)
 text = text+＂     ＂

 ?config［2］［2］
  coordsX--
  text = text+＂［color=#red］∞［/color］＂

 for v:columns
  ?v.Count() > fCount
   fCount = v.Count()

 ?fCount > 0
  var line
  for i = 0..fCount-1
   line =［］

   for v:columns
    ?v.Count() > i
     line.Add(Pad(Format(v［i］),formatW,＂ ＂))
    :
     line.Add(Repeat(＂ ＂,formatW))

   ?records［t-1］.Count() > i & records_fst［t］.Count() > i
    ?records［t-1］［i］> records_fst［t］［i］
     line.Add(＂［color = #blue］＂+PadR(＂+＂+(records［t-1］［i］-records_fst［t］［i］)+＂f＂,5,＂ ＂)+＂［/color］＂)

    :?records［t-1］［i］=records_fst［t］［i］
     line.Add(＂［color=#yellow］+0f［/color］＂)

    :
     line.Add(＂［color = #rainFF］＂+PadR(＂-＂+(records_fst［t］［i］-records［t-1］［i］)+＂f＂,5,＂ ＂)+＂［/color］＂)

   :
    line.Add(Repeat(＂ ＂,5))
   text = text+＂\n＂+string.Join(＂＂,line)
 text = text+Repeat(＂—＂,columns.Count()*formatW+extra)+＂\n＂

 ?config［2］［2］
  text = text + Pad(Format(records_sec［0］),formatW,＂ ＂)

 ?config［2］［1］
  text = text + Pad(Format(records_lst［0］),formatW,＂ ＂)

 text = text + Pad(Format(records_fst［0］),formatW,＂ ＂)
 text = text + Repeat(＂ ＂,formatW+extra+1)+＂\n＂
 tableTxt.h = fCount + 2
 tableTxt.w = columns.Count() * formatW+ extra
 tableTxt.x = screen.w - (columns.Count() * formatW+extra)
 tableTxt.text = text

func Format(x)
 ?config［0］= 0
  return PadL(x+＂f＂,5,＂ ＂)
 :?config［0］= 1
  return parseFrames(x,false)
 :?config［0］= 2
  return parseFrames(x,false)+＂.＂+PadL((x%30)+＂＂,2,＂0＂)+＂f＂

func TogglePanel()
 panel.visible = ! panel.visible

func CreatePanel()
 var timeBtn = ui.AddButton()

 timeBtn.style = -3
 timeBtn.x = screen.w-3
 timeBtn.y = 0
 timeBtn.w = 3
 timeBtn.h = 1
 timeBtn.anchor = top_left
 timeBtn.dock = top_left
 timeBtn.text = ＂ Ω ＂
 timeBtn.SetPressed(TogglePanel)

 tableTxt = AddText(1,1,1,1)
 panel = ui.AddPanel()
 panel.visible = false
 panel.clip = false
 panel.w = 26
 panel.h = 10
 panel.style = 3
 panel.color = #999

 var t = ui.AddText(＂Format\nTable＂)
 t.dock = top_left
 t.x = 7
 t.y = 4

 panel.Add(t)
 panel.Add(AddButton(9,2,3,1,0,＂ « ＂,OnClickFormat1))
 panel.Add(AddButton(20,2,3,1,0,＂ » ＂,OnClickFormat2))
 panel.Add(AddButton(9,3,3,1,0,＂ « ＂,OnClickTable1))
 panel.Add(AddButton(20,3,3,1,0,＂ » ＂,OnClickTable2))
 panel.Add(AddButton(15,5,7,3,-1,＂Close＂,TogglePanel))
 toggleOpts =［］

 for i = 0..toggleTexts.Count() -1
  toggleOpts.Add(AddButton(3,5 + i,10,1,0,Pad(toggleTexts［i］,10,＂ ＂),ToggleFuncs［i］))
  panel.Add(toggleOpts［i］)
 optFormat=AddText(12,2,8,1)

 panel.Add(optFormat)
 optTable = AddText(12,3,8,1)
 panel.Add(optTable)

func AddButton(x,y,w,h,style,text,onClick)
 var btn = ui.AddButton()
 btn.style = style
 btn.x = x
 btn.y = y
 btn.w = w
 btn.h = h
 btn.anchor = top_left
 btn.dock = top_left
 btn.text = text
 btn.SetPressed(onClick)
 return btn

func AddText(x,y,w,h)
 var btn = ui.AddText()
 btn.x = x
 btn.y = y
 btn.w = w
 btn.h = h
 btn.anchor = top_left
 btn.dock = top_left
 return btn

func OnClickFormat1()
 SetConfig(0,(config［0］+2)%3)

func OnClickFormat2()
 SetConfig(0,(config［0］+1)%3)

func OnClickTable1()
 SetConfig(1,(config［1］+2)%3)

func OnClickTable2()
 SetConfig(1,(config［1］+1)%3)

func Toggle0()
 Toggle(0)

func Toggle1()
 Toggle(1)

func Toggle2()
 Toggle(2)

var ToggleFuncs=［Toggle0,Toggle1,Toggle2］

func Toggle(i)
 config［2］［i］=!config［2］［i］
 UpdateCache()
 Save()

func SetConfig(i,x)
 config［i］=x
 UpdateCache()
 Save()

func Save()
 SetArray(＂sorgin.Timer.config＂,config)

Update()
func isLevel()
 for x:［shop,intro,cross,waterfall］
  ?loc = x
   return false
 return !loc.isQuest

func parseFrames(frames,padM)
 return parseTime(frames/30,padM)

func parseTime(x,padM)
 var minutes
 var seconds
 minutes = math.FloorToInt(x/60)+＂＂

 ?padM
  minutes = PadL(minutes,2,＂0＂)
 seconds = PadL(math.FloorToInt(x%60)+＂＂,2,＂0＂)
 return minutes+＂:＂+seconds

func GetBuffCount(str,name)
 ?str = name
  var buffString=string.Split(str,＂:＂)
  return int.Parse(buffString［buffString.IndexOf(name)+1］)
 return 0

func GetBuffTime(str,name)
 ?str = name
  var buffString = string.Split(str,＂:＂)
  var x = string.Split(buffString［buffString.IndexOf(name)+2］,＂,＂)
  return int.Parse(x［0］)
 return 0

func GetLastFoeId(map,stars)
 ?rocky_plateau = map
  return ＂＂
 :?deadwood_valley = map
  ?stars<6
   return ＂tree_boss＂
  :
   return ＂poena＂
 :?deadwood_valley = map
  return ＂＂

func GetArray(key,val)
 var x = storage.Get(key,false)
 ?x
  return Parse(x)
 return val

func SetArray(key,val)
 storage.Set(key,Stringify(val))

func Pad(input,len,str)
 ?string.Size(input) >= len
  return input
 return PadR(PadL(input,len-(len-string.Size(input))/2,str),len,str)

func PadR(input,len,str)
 ?string.Size(input) >= len
  return input
 return input + Repeat(str,len - string.Size(input))

func PadL(input,len,str)
 ?string.Size(input) >= len
  return input
 return Repeat(str,len - string.Size(input)) + input

func Repeat(input,len)
 ?len < 2
  return input
 var t
 t = input
 for i = 0..len-2
  t = t + input
 return t

func TrimL(input,char)
 var i=0
 for x:string.Split(input)
  ?x ! char
   break
  i++
 return string.Sub(input,i)
 var t

func Trim(input,char)
 var t

func Slice(arr,from,length)
 var r
 r=［］

 for v=from..(from + length-1)
  r.Add(arr［v］)
 return r

func Pop(arr)
 var count = arr.Count()
 ?count=0
  return null
 var x=arr［count-1］
 arr.RemoveAt(count-1)
 return x

func Shift(arr)
 ?arr.Count()=0
  return null
 var x=arr［0］
 arr.RemoveAt(0)
 return x

func Unshift(arr,val)
 arr.Insert(0,val)

func Unique(arr)
 var a =［］
 for i=0..arr.Count()-1
  ?!a.Contains(arr［i］)
   a.Add(arr［i］)
 return a

func Contains(arr,val)
 for x:arr
  ?val = x
   return true
 return false

func Stringify(x)
 ?Type(x) = array
  return Array2String(x)
 :?Type(x) = string
  return ＂\＂＂+x+＂\＂＂
 :?Type(x) = float
  return Float2String(x)
 :?Type(x) = ＂null＂
  return ＂null＂
 :?Type(x) = int|Type(x)=bool
  return x+＂＂
 :
  return x+＂＂

func Array2String(arr)
 var result =［］
 ?arr.Count() = 0
  return ＂［］＂
 for a:arr
  result.Add(Stringify(a))
 return ＂［＂+string.Join(＂,＂,result)+＂］＂

func Float2String(x)
 var i = math.FloorToInt(x)
 var m = Math.pow(10,string.Size(x+＂＂)-string.Size(i+＂ ＂))
 return i+＂.＂+(x*m-i*m)

func Parse(str)
 ?string.Size(str) = 0
  return ＂＂
 var arr=string.Break(str,1)
 ?arr［0] = ＂［＂
  return ProcessArray(arr)
 return GetPrimitive(str)

func ProcessArray(arr)
 ?arr.Count() = 2
  return ［］
 var a =［］
 var b
 var length
 for i=1..arr.Count() - 2
  var v = arr［i］
  ?v = ＂［＂
   length = GetLength(arr,i,true)+1
   b = Slice(arr,i,length)
   a.Add(ProcessArray(b))
   i+ = length
  :
   lengthc= GetLength(arr,i,false)
   b = string.Join(＂＂,Slice(arr,i,length))
   a.Add(GetPrimitive(b))
   i+ = length
 return a

func GetLength(arr,from,isArray)
 var inString = false
 var depth = 0
 var marks =［＂］＂,＂,＂］
 ?isArray
  marks =［＂］＂］

 for i = from..arr.Count()
  ?arr［i］=＂\＂＂ & isArray
   inString=!inString
  ?!inString
   ?arr［i］=＂［＂
    depth++
   :?arr［i］=＂］＂
    depth--
   ?depth<=0 & marks.Contains(arr［i］)
    return i-from
 return arr.Count()

func GetPrimitive(r)
 ?string.IndexOf(r,＂\＂＂) >= 0
  return string.Sub(r,1,string.Size(r)-2)
 :?r = False | r = True
  return r = True
 :?r = ＂null＂
  return null
 :?string.IndexOf(r,＂.＂) >= 0
  var x=string.Split(r,＂.＂)
  return int.Parse(x［0］)+(int.Parse(x［1］)/Math.pow(10,string.Size(x［1］)))
 return int.Parse(r)
